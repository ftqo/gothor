// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/discord-gophers/goapi-gen/runtime"
	openapi_types "github.com/discord-gophers/goapi-gen/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
	"github.com/google/uuid"
)

// Login defines model for Login.
type Login struct {
	// The user's email address
	Email openapi_types.Email `json:"email"`

	// The user's password
	Password string `json:"password"`
}

// Post defines model for Post.
type Post struct {
	// The content of the blog post in markdown format
	Content string `json:"content"`

	// The date and time the blog post was created
	CreatedAt time.Time `json:"createdAt"`

	// The unique identifier of the blog post
	ID uuid.UUID `json:"id"`

	// The title of the blog post
	Title string `json:"title"`

	// The date and time the blog post was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// Signup defines model for Signup.
type Signup struct {
	// The user's email address
	Email openapi_types.Email `json:"email"`

	// The user's password
	Password string `json:"password"`

	// The user's username
	Username string `json:"username"`
}

// User defines model for User.
type User struct {
	// The user's email address
	Email openapi_types.Email `json:"email"`

	// The unique identifier of the user
	ID uuid.UUID `json:"id"`

	// The user's username
	Username string `json:"username"`
}

// PostAuthLoginJSONBody defines parameters for PostAuthLogin.
type PostAuthLoginJSONBody Login

// PostAuthSignupJSONBody defines parameters for PostAuthSignup.
type PostAuthSignupJSONBody Signup

// PostPostsJSONBody defines parameters for PostPosts.
type PostPostsJSONBody Post

// PutPostsPostIDJSONBody defines parameters for PutPostsPostID.
type PutPostsPostIDJSONBody Post

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody PostAuthLoginJSONBody

// Bind implements render.Binder.
func (PostAuthLoginJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostAuthSignupJSONRequestBody defines body for PostAuthSignup for application/json ContentType.
type PostAuthSignupJSONRequestBody PostAuthSignupJSONBody

// Bind implements render.Binder.
func (PostAuthSignupJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostPostsJSONRequestBody defines body for PostPosts for application/json ContentType.
type PostPostsJSONRequestBody PostPostsJSONBody

// Bind implements render.Binder.
func (PostPostsJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PutPostsPostIDJSONRequestBody defines body for PutPostsPostID for application/json ContentType.
type PutPostsPostIDJSONRequestBody PutPostsPostIDJSONBody

// Bind implements render.Binder.
func (PutPostsPostIDJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// PostAuthLoginJSON200Response is a constructor method for a PostAuthLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func PostAuthLoginJSON200Response(body User) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostAuthSignupJSON201Response is a constructor method for a PostAuthSignup response.
// A *Response is returned with the configured status code and content type from the spec.
func PostAuthSignupJSON201Response(body User) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// GetPostsJSON200Response is a constructor method for a GetPosts response.
// A *Response is returned with the configured status code and content type from the spec.
func GetPostsJSON200Response(body []Post) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostPostsJSON201Response is a constructor method for a PostPosts response.
// A *Response is returned with the configured status code and content type from the spec.
func PostPostsJSON201Response(body Post) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// GetPostsPostIDJSON200Response is a constructor method for a GetPostsPostID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetPostsPostIDJSON200Response(body Post) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PutPostsPostIDJSON200Response is a constructor method for a PutPostsPostID response.
// A *Response is returned with the configured status code and content type from the spec.
func PutPostsPostIDJSON200Response(body Post) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log in
	// (POST /auth/login)
	PostAuthLogin(w http.ResponseWriter, r *http.Request) *Response
	// Log out
	// (POST /auth/logout)
	PostAuthLogout(w http.ResponseWriter, r *http.Request) *Response
	// Sign up
	// (POST /auth/signup)
	PostAuthSignup(w http.ResponseWriter, r *http.Request) *Response
	// Get all blog posts
	// (GET /posts)
	GetPosts(w http.ResponseWriter, r *http.Request) *Response
	// Create a new blog post
	// (POST /posts)
	PostPosts(w http.ResponseWriter, r *http.Request) *Response
	// Delete a blog post
	// (DELETE /posts/{postId})
	DeletePostsPostID(w http.ResponseWriter, r *http.Request, postID uuid.UUID) *Response
	// Get a specific blog post
	// (GET /posts/{postId})
	GetPostsPostID(w http.ResponseWriter, r *http.Request, postID uuid.UUID) *Response
	// Update a blog post
	// (PUT /posts/{postId})
	PutPostsPostID(w http.ResponseWriter, r *http.Request, postID uuid.UUID) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	Middlewares      map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// PostAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostAuthLogin(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostAuthLogout(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostAuthSignup operation middleware
func (siw *ServerInterfaceWrapper) PostAuthSignup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostAuthSignup(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetPosts(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostPosts operation middleware
func (siw *ServerInterfaceWrapper) PostPosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostPosts(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	// Operation specific middleware
	handler = siw.Middlewares["authentication"](handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

// DeletePostsPostID operation middleware
func (siw *ServerInterfaceWrapper) DeletePostsPostID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "postId" -------------
	var postID uuid.UUID

	if err := runtime.BindStyledParameter("simple", false, "postId", chi.URLParam(r, "postId"), &postID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "postId"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.DeletePostsPostID(w, r, postID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	// Operation specific middleware
	handler = siw.Middlewares["authentication"](handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

// GetPostsPostID operation middleware
func (siw *ServerInterfaceWrapper) GetPostsPostID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "postId" -------------
	var postID uuid.UUID

	if err := runtime.BindStyledParameter("simple", false, "postId", chi.URLParam(r, "postId"), &postID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "postId"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetPostsPostID(w, r, postID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PutPostsPostID operation middleware
func (siw *ServerInterfaceWrapper) PutPostsPostID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "postId" -------------
	var postID uuid.UUID

	if err := runtime.BindStyledParameter("simple", false, "postId", chi.URLParam(r, "postId"), &postID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "postId"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PutPostsPostID(w, r, postID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	// Operation specific middleware
	handler = siw.Middlewares["authentication"](handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:     "/",
		BaseRouter:  chi.NewRouter(),
		Middlewares: make(map[string]func(http.Handler) http.Handler),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		Middlewares:      options.Middlewares,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	middlewares := []string{"authentication"}
	for _, m := range middlewares {
		if _, ok := wrapper.Middlewares[m]; !ok {
			panic("goapi-gen: could not find tagged middleware " + m)
		}
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Post("/auth/login", wrapper.PostAuthLogin)
		r.Post("/auth/logout", wrapper.PostAuthLogout)
		r.Post("/auth/signup", wrapper.PostAuthSignup)
		r.Get("/posts", wrapper.GetPosts)
		r.Post("/posts", wrapper.PostPosts)
		r.Delete("/posts/{postId}", wrapper.DeletePostsPostID)
		r.Get("/posts/{postId}", wrapper.GetPostsPostID)
		r.Put("/posts/{postId}", wrapper.PutPostsPostID)

	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithMiddleware(key string, middleware func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares[key] = middleware
	}
}

func WithMiddlewares(middlewares map[string]func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares = middlewares
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXTW/jNhD9KwRboBfZctoeFrpld4FtigINml30EORAi2OJG4rkkkO7buD/XpBSJNmm",
	"nRj56l4SQSbn4715M6M7WurGaAUKHS3uqCtraFh8/ENXQoUHY7UBiwLia2iYkOGBgyutMCi0ogX9XAPx",
	"DuxPjsQThHFuwTma0YW2DUNadFczimsDtKAOrVAV3WTUMOdW2vKjZvtDI4ujdztGNxm18M0LC5wW173r",
	"/sJNf0PPv0KJIYxL7XA/4VIrBIXp2LofiV4QrIHMpa6I0Q6JUKRh9pbrlSJduInESwsMgZ8fsM4ZAmGK",
	"ExQN7DhYMUe662NEwpVJOJ5yJw4hrMQ3D0RwUCgWAuxePmMX3gueso4CJaQdxJ9SRveMeMOfgohkDkln",
	"45Gw7FRKm1tMJeu5HzM1jjFVRVeiUt58t8LJaLimWANHjfaHTlbeyEEKvi8O7OuAd7IagqfHCOF5AYw+",
	"7pM4Al24J9RC73tlxInGyFYrlVAVcWCXYMlKYE1Y36gmc+aAkzkrb0HxKLPSO9SN+JfNJZCFjXLgxILi",
	"EIKd9lopaKWx1gGfJVjXOp5NZ9OzgIg2oJgRtKC/TM+ms1gOWEdmc+axzmU/bLoevJ3Bucc6sFFG+Ufs",
	"YngW0FtFGPn9788E9S2o0HgZ+Q3R/KnkOiNXUHob+rS+FQHrUFQsWL3gtIgdP9huZ12LOzh8r/l6p/Uz",
	"Y2RwL7TKvzqthmEZnn60sKAF/SEfpmnejdK8tb3ZphWth/jCGa1cW+M/z2bP5jSqKPrcBjK8J6EKgAek",
	"nC9LcG7hpVzTjNbAONgYzBXg5EML2h4bW2AfhnqIdLfAY2DONw2za1qETYNEiLKhGrTHw+VwoZZMijgL",
	"cFBUH9YxmoPdPdx/3XcxBkp7fAak7kPmXeU2ehln1EkwhfAHnNwwapI4/QWVcBi0QhSs7vtXGptubL2M",
	"BjrjjxLB2euIwHbYAP+fqCBgRCJIGc0DnzGCCpK8ohWwDK1QChe3TyblsAq59Pq5TfwnwMvo5YltSCA0",
	"7iEq4mq96WcWs5atU9Sc9wkNydBtnD4B7mQbN6GkAD7Era0r/weW831ZDPA8vyJaQF5XD4PPbZTe98B0",
	"W+62IrbhT0NKM/rPpNKTRnAuYcVsiP6asmFuB1c3Q23nd+HfBd+0pEnAhMQ+xveEEWegFAtRjjicr8nF",
	"xz3a2huRuPAnnjDMsgYwSvr6joY9I64fNKPtlkbbUOguF2PxPrD0bW4eM1QGoNuMjwLdJ38yyNmDXeMQ",
	"nqf0jbfGd/biujgnTqhKjr9YE60oAWZsSD5BwRfTfsA+iYBL/2YEvGUfnL1iH+y+8I/Js6fy9B4Y7MQP",
	"sJYvbyUtaI1oijyXumSy1g6Ld7N3s5wZkS/P6OZm818AAAD//270f5uqEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
